/* Define os lexemas */
L    [a-zA-Z]
D    [0-9]
S    [~`!@#$%^&*()_\-+\\/\[\]|'?,><.,]

%%

/* Regras para os lexemas fornecidos */
NUMERO         {D}+(\.{D}+)?((E|e)(+|-)?{D}+)?
LITERAL        \"({L}|{D}|{S}|=|\t)*\"
IDENTIFICADOR  {L}({L}|{D}|_)*
OP_RELACIONAL  <|>|>=|<=|==|<>
OP_ARITIMETICO  \+|\-|\*|\/
ATRIBUICAO     =
ABRE_PAR       \(
FECHA_PAR      \)
VIRGULA        ,
PONTO_E_VIRG   ;
VAZIO          ( |\t|\r|\n)+
COMENTARIO     \{({L}|{D}|{S}| |\t)*\}

{NUMERO}                { ret_print("NUMERO"); }
{LITERAL}               { tipo_declarado = TIPO_STRING ;ret_print("STRING"); }
{IDENTIFICADOR}         { ret_print("IDENTIFICADOR"); }
{OP_RELACIONAL}         { ret_print("OP_RELACIONAL"); }
{OP_ARITIMETICO}        { ret_print("OP_ARITMETICO"); }
{ATRIBUICAO}            { ret_print("ATRIBUICAO"); }
{ABRE_PAR}              { ret_print("ABRE_PAR"); }
{FECHA_PAR}             { ret_print("FECHA_PAR"); }
{VIRGULA}               { ret_print("VIRGULA"); }
{PONTO_E_VIRG}          { ret_print("PONTO_E_VIRG"); }
{VAZIO}                 { ret_print("VAZIO"); }
{COMENTARIO}            { tipo_declarado = TIPO_COMENTARIO; ret_print("COMENTARIO"); }

{NUMERO}                { ret_print("NUMERO"); }
{LITERAL}               { tipo_declarado = TIPO_STRING ;ret_print("STRING"); }
{IDENTIFICADOR}         { ret_print("IDENTIFICADOR"); }
{VAZIO}                 { ret_print("VAZIO"); }
{COMENTARIO}            { tipo_declarado = TIPO_COMENTARIO; ret_print("COMENTARIO"); }

PROGRAMA: INICIOPROG LISTA_PARAM FIMPROG |
 error ;

LISTA_PARAM: INICIOARGS DECLARA_VAR FIMARGS LISTA_VAR |
 LISTA_VAR |
 error ;

DECLARA_VAR: TIPO_VAR NOMES PONTO_E_VIRG DECLARA_VAR |
 VAZIO |
 error ;

LISTA_VAR: INICIOVARS DECLARA_VAR FIMVARS CODIGO |
 CODIGO |
 error ;

CODIGO: COMANDO CODIGO |
 COMENTARIO CODIGO |
 VAZIO |
 error ;

NOMES: IDENTIFICADOR VIRGULA NOMES |
 IDENTIFICADOR |
 error ;

TIPO_VAR: INTEIRO |
 REAL |
 LITERAL |
 error ;

COMANDO: IDENTIFICADOR ATRIBUICAO EXPRESSAO PONTO_E_VIRG |
 ESCREVA CORPO_ESCREVA PONTO_E_VIRG |
 SE CONDICAO ENTAO CODIGO FIM_SE |
 ENQUANTO CONDICAO FACA CODIGO FIM_ENQUANTO |
 error ;

CORPO_ESCREVA: STRING |
 IDENTIFICADOR |
 EXPRESSAO |
 error ;

CONDICAO: ABRE_PAR IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR FECHA_PAR |
 error ;

EXPRESSAO: EXPRESSAO '+' EXPRESSAO |
 EXPRESSAO '-' EXPRESSAO |
 EXPRESSAO '*' EXPRESSAO |
 EXPRESSAO '/' EXPRESSAO |
 ABRE_PAR EXPRESSAO FECHA_PAR |
 '-' EXPRESSAO %prec UMINUS |
 NUMERO |
 error ;


PROGRAMA:
    INICIOPROG LISTA_PARAM FIMPROG              { printf("PROGRAMA -> INICIOPROG LISTA_PARAM FIMPROG\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("PROGRAMA -> error\t\tnro linha: %d\n", lineno); }
;

LISTA_PARAM:
    INICIOARGS DECLARA_VAR FIMARGS LISTA_VAR    { printf("LISTA_PARAM -> INICIOARGS DECLARA_VAR FIMARGS LISTA_VAR\t\tnro linha: %d\n", lineno); }
    |
    LISTA_VAR                                   { printf("LISTA_PARAM -> LISTA_VAR\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("LISTA_PARAM -> error\t\tnro linha: %d\n", lineno); }
;

LISTA_VAR:
    INICIOVARS DECLARA_VAR FIMVARS CODIGO       { printf("LISTA_VAR -> INICIOVARS DECLARA_VAR FIMVARS CODIGO\t\tnro linha: %d\n", lineno); }
    |
    CODIGO                                      { printf("LISTA_VAR -> CODIGO\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("LISTA_VAR -> error\t\tnro linha: %d\n", lineno); }
;

DECLARA_VAR:
    TIPO_VAR NOMES PONTO_E_VIRG DECLARA_VAR     { printf("DECLARA_VAR -> TIPO_VAR NOMES PONTO_E_VIRG DECLARA_VAR\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("DECLARA_VAR -> error\t\tnro linha: %d\n", lineno); }
;

NOMES:
    IDENTIFICADOR VIRGULA NOMES                 { printf("NOMES -> IDENTIFICADOR VIRGULA NOMES\t\tnro linha: %d\n", lineno); }
    |
    IDENTIFICADOR                               { printf("NOMES -> IDENTIFICADOR\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("NOMES -> error\t\tnro linha: %d\n", lineno); }
;

TIPO_VAR:
    INTEIRO                                     { printf("TIPO_VAR -> INTEIRO\t\tnro linha: %d\n", lineno); }
    |
    REAL                                        { printf("TIPO_VAR -> REAL\t\tnro linha: %d\n", lineno); }
    |
    LITERAL                                     { printf("TIPO_VAR -> LITERAL\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("TIPO_VAR -> error\t\tnro linha: %d\n", lineno); }
;

CODIGO:
    COMANDO CODIGO                              { printf("CODIGO -> COMANDO CODIGO\t\tnro linha: %d\n", lineno); }
    |
    COMENTARIO CODIGO                           { printf("CODIGO -> COMENTARIO CODIGO\t\tnro linha: %d\n", lineno); }
    |
    VAZIO                                       { printf("CODIGO -> VAZIO\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("CODIGO -> error\t\tnro linha: %d\n", lineno); }
;

COMANDO:
    IDENTIFICADOR ATRIBUICAO EXPRESSAO PONTO_E_VIRG { printf("COMANDO -> IDENTIFICADOR ATRIBUICAO EXPRESSAO PONTO_E_VIRG CODIGO\t\tnro linha: %d\n", lineno); }
    |
    ESCREVA CORPO_ESCREVA PONTO_E_VIRG { printf("COMANDO -> ESCREVA CORPO_ESCREVA PONTO_E_VIRG\t\tnro linha: %d\n", lineno); }
    |
    SE CONDICAO ENTAO CODIGO FIM_SE { printf("COMANDO -> SE CONDICAO ENTAO CODIGO FIM_SE\t\tnro linha: %d\n", lineno); }
    |
    ENQUANTO CONDICAO FACA CODIGO FIM_ENQUANTO { printf("COMANDO -> ENQUANTO CONDICAO FACA CODIGO FIM_ENQUANTO\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("COMANDO -> error\t\tnro linha: %d\n", lineno); }
;

CORPO_ESCREVA:
    STRING  { printf("CORPO_ESCREVA -> STRING\t\tnro linha: %d\n", lineno); }
    |
    IDENTIFICADOR { printf("CORPO_ESCREVA -> IDENTIFICADOR\t\tnro linha: %d\n", lineno); }
    |
    EXPRESSAO { printf("CORPO_ESCREVA -> EXPRESSAO\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("CORPO_ESCREVA -> error\t\tnro linha: %d\n", lineno); }
;

CONDICAO:
    ABRE_PAR IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR FECHA_PAR { printf("CONDICAO -> ABRE_PAR IDENTIFICADOR OP_RELACIONAL IDENTIFICADOR FECHA_PAR\t\tnro linha: %d\n", lineno); }
    | 
    error { printf("CONDICAO -> error\t\tnro linha: %d\n", lineno); }
;

EXPRESSAO : 
    EXPRESSAO '+' EXPRESSAO { $$ = $1 + $3;  printf("EXPRESSAO -> EXPRESSAO '+' EXPRESSAO\t\tnro linha: %d\n", lineno); } 
    | 
    EXPRESSAO '-' EXPRESSAO { $$ = $1 - $3; printf("EXPRESSAO -> EXPRESSAO '-' EXPRESSAO\t\tnro linha: %d\n", lineno);}
    | 
    EXPRESSAO '*' EXPRESSAO { $$ = $1 * $3; printf("EXPRESSAO -> EXPRESSAO '*' EXPRESSAO\t\tnro linha: %d\n", lineno);}
    | 
    EXPRESSAO '/' EXPRESSAO { $$ = $1 / $3; printf("EXPRESSAO -> EXPRESSAO '/' EXPRESSAO\t\tnro linha: %d\n", lineno);}
    | 
    ABRE_PAR EXPRESSAO FECHA_PAR { $$ = $2; printf("EXPRESSAO -> ABRE_PAR EXPRESSAO FECHA_PAR\t\tnro linha: %d\n", lineno);}
    | 
    '-' EXPRESSAO %prec UMINUS { $$ = -$2; printf("EXPRESSAO -> '-' EXPRESSAO \%prec UMINUS\t\tnro linha: %d\n", lineno);}
    | 
    NUMERO {printf("EXPRESSAO -> NUMERO\t\tnro linha: %d\n", lineno);}
    | 
    error { printf("EXPRESSAO -> error\t\tnro linha: %d\n", lineno); }
;